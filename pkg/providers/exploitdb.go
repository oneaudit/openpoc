package providers

import (
	"bytes"
	"encoding/csv"
	"io"
	"openpoc/pkg/types"
	"openpoc/pkg/utils"
	"os"
	"strings"
	"time"
)

func ParseExploitDB(csvFilePath string) ([]*types.ExploitDB, error) {
	file, err := os.ReadFile(csvFilePath)
	if err != nil {
		return nil, err
	}

	// .csv
	csvReader := csv.NewReader(bytes.NewReader(file))
	csvReader.Comma = ','
	csvReader.FieldsPerRecord = 17

	firstLine := true
	var records []*types.ExploitDB
	for {
		record, err := csvReader.Read()
		if err == io.EOF {
			break
		}
		if firstLine {
			firstLine = false
			continue
		}
		if err != nil {
			return nil, err
		}

		var cveIds []string
		codes := strings.Split(record[11], ";")
		for _, code := range codes {
			code = strings.ToUpper(code)
			if strings.HasPrefix(code, "CVE-") && code != "CVE-NA" {
				cveIds = append(cveIds, code)
			}
		}

		for _, cveId := range cveIds {
			if cveId == "" {
				continue
			}
			cveId = utils.CleanCVE(cveId)
			if strings.Contains(cveId, "CVE:") {
				cveId = strings.Replace(cveId, "CVE:", "", 1)
			}
			if strings.Contains(cveId, ".") {
				cveId = strings.Replace(cveId, ".", "", 1)
			}

			records = append(records, &types.ExploitDB{
				Cve:            cveId,
				Id:             record[0],
				File:           record[1],
				Description:    record[2],
				DatePublished:  getDate(record[3]),
				Author:         record[4],
				Type:           record[5],
				Platform:       record[6],
				Port:           record[7],
				DateAdded:      getDate(record[8]),
				DateUpdated:    getDate(record[9]),
				Verified:       record[10] == "1",
				Codes:          record[11],
				Tags:           record[12],
				Aliases:        record[13],
				Screenshot:     record[14],
				ApplicationURL: record[15],
				SourceURL:      record[16],
			})
		}
	}
	return records, nil
}

func getDate(s string) time.Time {
	r, err := time.Parse(time.DateOnly, s)
	if err != nil {
		return types.DefaultDate
	}
	return r
}
